<?xml version="1.0"?>
<project name="sstone-j2me" default="package" basedir=".">

  <property environment="env"/>
  <property name="build.config.dir" value='src/build'/>
  <typedef file="${build.config.dir}/j2me.antlib.xml"/>
  <typedef file="${build.config.dir}/io.antlib.xml"/>

  <condition property='user.properties.location'
            value='${env.HANDSET_TESTER_USER_PROPERTIES_FILE}'
            else='${build.config.dir}/user.properties'>
    <isset property='env.HANDSET_TESTER_USER_PROPERTIES_FILE'/>
  </condition>

  <property file="${user.properties.location}"/>

  <condition property='m2.repo' value='${env.M2_REPO}' else='${user.home}/.m2/repository'>
    <isset property='env.M2_REPO'/>
  </condition>
  <property name='maven.ant.tasks.jar' value='${m2.repo}/org/apache/maven/maven-ant-tasks/2.1.3/maven-ant-tasks-2.1.3.jar'/>

  <condition property='has_all_deps'>
    <and>
      <available file='${antenna.jar}'/>
      <available file='${proguard.jar}'/>
      <available file='${junit.jar}'/>
      <available file='${sstone.common.jar}'/>
      <available file='${sstone.model.reader.jar}'/>
      <available file='${sstone.j2me.common.jar}'/>
    </and>
  </condition>

  <condition property='device' value='S40_5th_Edition_SDK'>
    <equals arg1='${emulator}' arg2='nokias40' casesensitive='false' trim='true'/>
  </condition>

  <property file="${build.config.dir}/project.properties"/>

  <!--
    Set the ${wtk.home} property based on the value of the ${emulator}
    property, and default it to ${wtk.home.sun} if emulator is undefined.
  -->
  <condition property='wtk.home' value='${wtk.home.samsung}'>
    <equals arg1='${emulator}' arg2='samsung' casesensitive='false' trim='true'/>
  </condition>
  <condition property='wtk.home' value='${wtk.home.nokias40}'>
    <equals arg1='${emulator}' arg2='nokias40' casesensitive='false' trim='true'/>
  </condition>
  <property name='wtk.home' value='${wtk.home.sun}'/>

  <path id='compile.classpath'>
    <pathelement path="${antenna.jar}"/>
    <pathelement path="${proguard.jar}"/>
    <fileset file="${wtk.home}/lib/jsr75.jar"/>
    <fileset file="${sstone.common.jar}"/>
    <fileset file="${sstone.model.reader.jar}"/>
    <fileset file="${sstone.j2me.common.jar}"/>
  </path>

  <path id='obfuscate.classpath'>
    <pathelement path="${antenna.jar}"/>
    <pathelement path="${proguard.jar}"/>
    <fileset file="${wtk.home}/lib/jsr75.jar"/>

    <!-- Add sstone.j2me.common.jar to the obfuscation and preverification classpaths -->
    <!-- because it contains device-specific stub-classes (e.g., com.nokia.*...) that are -->
    <!-- excluded from the final jar -->

    <!-- The includes does not do what we want it to do... we need to do some copying to exclude other stuff -->
    <!-- Having said that, it does not really hurt... just throws warnings of dup files. -->
    <fileset file="${sstone.j2me.common.jar}" includes="com/nokia/**/*"/>
  </path>

  <path id='preverify.classpath'>
    <fileset file="${wtk.home}/lib/jsr75.jar"/>
<!--     <fileset file="${sstone.j2me.common.jar}"/> -->
  </path>

  <path id='test.compile.classpath'>
    <pathelement path="${compile.classpath}"/>
    <pathelement path="${project.build.outputDirectory}"/>
    <fileset file="${sstone.common.jar}"/>
    <fileset file="${sstone.model.reader.jar}"/>
    <fileset file="${sstone.j2me.common.jar}"/>
    <fileset file="${junit.jar}"/>
  </path>

  <path id='test.run.classpath'>
    <pathelement path="${compile.classpath}"/>
    <pathelement path="${project.build.outputDirectory}"/>
    <pathelement path="${project.build.testOutputDirectory}"/>
    <fileset file="${junit.jar}"/>
  </path>

  <fail message='To use this build, you must set a wtk.home property to point to the install root of your j2me WTK'>
    <condition>
      <not>
        <resourceexists>
          <file file="${wtk.home}"/>
        </resourceexists>
      </not>
    </condition>
  </fail>

  <condition property='include_wav_files'>
    <equals arg1='${audio.type}' arg2='wav'/>
  </condition>
  <condition property='include_mp3_files'>
    <equals arg1='${audio.type}' arg2='mp3'/>
  </condition>

  <!-- ======= -->
  <!-- Targets -->
  <!-- ======= -->
  <target name='package' depends='initialize, resolve, compile, jad, jar, obfuscate, preverify, sign' description='Build the project'/>
  <target name='run' depends='package, run:midlet' description='Run the App'/>

  <target name="jad" depends='resolve'>
    <!--
      NOTE: The wtkjad task can update jad file metadata from the listed
            attributes or from the jar (jar file size). We can run it independently
            to update the jad file with attributes without recompiling.
    -->
    <wtkjad jadfile="${jadfile}"
            jarfile="${jarfile}"
            name="${midlet.name}"
            vendor="${vendor}"
            version="${project.version}">
        <midlet name="${midlet.name}"
                class="${project.mainClass}"
                icon="/img/phone.png"/>
        <!-- App configuration -->
        <attribute name="MIDlet-Permissions" value="${app.permissions}" if="app.permissions"/>
				<attribute name="MIDlet-Permissions-Opt" value="${app.permissions.opt}" if="app.permissions.opt"/>

        <attribute name="logLevel" value="${logLevel}"/>
        <attribute name="lang" value="${lang}"/>
        <attribute name="langMapping" value="${langMapping}"/>
        <attribute name="theme" value="BlueGradientTheme"/>

        <attribute name="audioType" value="${audio.type}" if='force.audio.type'/>

        <!-- FONTS -->
        <attribute name="fontEngine" value="${fontEngine}"/>
        <attribute name="fontSizes" value="${fontSizes}"/>

        <!--
        <attribute name="moduleLoaderType" value="ModuleLoader"/>
        <attribute name="streamProviderType" value="ClasspathInputStreamProvider"/>
        -->
        <attribute name="moduleLoaderType" value="${moduleLoaderType}"/>
        <attribute name="streamProviderType" value="${streamProviderType}"/>

				<attribute name="splashScreenTimeout" value="${splashScreenTimeout}" if="${splashScreenTimeout}"/>

        <attribute name="modulePaths" value="${modulePaths}"/>
        <attribute name="playAudioFromUrls" value="${playAudioFromUrls}"/>
        <attribute name="enableLogScreen" value="${enableLogScreen}"/>

        <attribute name="showPreferencesInMainMenu" value="${showPreferencesInMainMenu}"/>
    </wtkjad>
  </target>

  <target name='jar' description='package contents into a jar' depends='resolve'>
    <wtkpackage jadfile="${jadfile}"
                jarfile="${jarfile}"
                obfuscate="false"
                preverify="false">

          <fileset dir="${project.build.outputDirectory}">
            <exclude name='modules/**/*'/>
          </fileset>

          <fileset dir="${project.build.resources}">
            <exclude name="**/*.wav" unless='${include_wav_files}'/>
            <exclude name="**/*.mp3" unless='${include_mp3_files}'/>
            <exclude name='modules/**/*' unless='${include.sample.modules}'/>

            <!-- We must set include.sample.modules to true AND set includes for individual modules to true to include them. -->
            <exclude name='modules/mod1/**/*' unless='${include.sample.mod1}'/>
            <exclude name='modules/mod1' unless='${include.sample.mod1}'/>

            <exclude name='modules/mod2/**/*' unless='${include.sample.mod2}'/>
            <exclude name='modules/mod2' unless='${include.sample.mod2}'/>

            <exclude name='modules/mod3/**/*' unless='${include.sample.mod3}'/>
            <exclude name='modules/mod3' unless='${include.sample.mod3}'/>

            <exclude name='modules/mod4/**/*' unless='${include.sample.mod4}'/>
            <exclude name='modules/mod4' unless='${include.sample.mod4}'/>

            <exclude name='modules/**/audio/tracks/*' if='${skipBigAudio}'/>
            <exclude name='modules/**/audio/words/*' if='${skipBigAudio}'/>

            <exclude name='**/*.swp'/>
          </fileset>

          <zipfileset src="${sstone.common.jar}">
            <include name="**/*.class"/>
            <exclude name="**/MANIFEST.MF"/>
          </zipfileset>

          <zipfileset src="${sstone.model.reader.jar}">
            <include name="**/*.class"/>
            <exclude name="**/MANIFEST.MF"/>
          </zipfileset>

          <zipfileset src="${sstone.j2me.common.jar}">
            <include name="**/*.class"/>
            <include name="**/*.fnt"/>
            <exclude name="**/*.wav"/>
            <exclude name="**/*.mp3"/>
            <exclude name="**/MANIFEST.MF"/>
            <exclude name="com/nokia/**/*"/>
            <exclude name="com/samsung/**/*"/>
          </zipfileset>
    </wtkpackage>
  </target>

  <target name='obfuscate' description='obfuscate and minify the output jar with proguard' depends='resolve' unless='skip.obfuscate'>
    <wtkobfuscate jadfile="${jadfile}"
                  jarfile="${jarfile}"
                  classpathref="obfuscate.classpath">
                  <preserve class='org.edc.sstone.j2me.device.nokia.NokiaDeviceControl'/>
                  <preserve class='org.edc.sstone.j2me.device.BacklightControl'/>
    </wtkobfuscate>
  </target>

  <target name='sign' description='Sign the jar and jad files with our code signing certificate' if="${sign.app}" depends='resolve'>
    <echo>Signing with: store pass: ${keystore.pass} / key pass: ${code_signing_key.pass}</echo>
    <wtksign keystore="${keystore.file}"
             jarfile="${jarfile}"
             jadfile="${jadfile}"
             storepass="${keystore.pass}"
             certpass="${code_signing_key.pass}"
             certalias="${code_signing_cert.alias}"/>
  </target>

  <target name='preverify' depends='resolve'>
    <wtkpreverify jarfile="${jarfile}" jadfile="${jadfile}" classpathref='preverify.classpath'/>
  </target>

  <target name='run:midlet' depends='resolve'>
    <wtkrun jadfile="${jadfile}"
            device='${device}'
            heapsize='${emulator.heapsize}'
            wait="${wtk.run.wait}"/>
  </target>

  <target name='compile' description='compile java sources' depends='initialize,resolve'>
    <wtkbuild srcdir="${project.build.sourceDirectory}"
              destdir="${project.build.outputDirectory}"
              classpathref="compile.classpath"
              preverify="false"/>
  </target>

  <!-- TODO: add other tests -->
  <target name='test' description='run all tests' depends='test:junit'/>

  <target name='test-compile' description='compile unit tests' depends='compile'>
    <javac srcdir='${project.build.testSourceDirectory}'
           destdir='${project.build.testOutputDirectory}'
           classpathref='test.compile.classpath'
           source='1.1'/>
  </target>

  <target name='test:junit' description='unit tests' depends='test-compile'>
    <junit>
      <classpath refid="test.run.classpath" />
      <formatter type="brief" usefile="false" />
      <batchtest fork="yes">
        <fileset dir="${project.build.testOutputDirectory}" includes="**/*Test.class"/>
      </batchtest>
    </junit>
  </target>

  <target name='clean' description='delete the target directory, including compiled class, jar and jad files'>
    <delete dir="${project.build.directory}"/>
  </target>

  <target name='initialize' description='initialize target directories'>
    <mkdir dir="${project.build.outputDirectory}"/>
    <mkdir dir="${project.build.testOutputDirectory}"/>
    <mkdir dir="${keystore.dir}"/>
    <mkdir dir="${lib.dir}"/>

    <!--
      lib.classpath will include lib/*jar, any jars specified on the ant
      command line with -lib, and all jars in ant's lib directory (including ones
      symlinked there)
    -->
    <path id="lib.classpath">
      <fileset dir="${lib.dir}" includes="*.jar"/>
      <pathelement path="${java.class.path}"/>
    </path>

  </target>

  <!-- For *nix only -->
  <target name='fix_wm_name'
    description='If you run a non-reparenting window manager with x11/xorg, run this target once per xorg session to fix irregular emulator GUI behavior'>
    <exec executable="wmname">
      <arg value="LG3D"/>
    </exec>
  </target>

  <target name='props' description='print all build properties. This is just for debugging the build.'>
    <echoproperties/>
  </target>

  <target name='list:emulators'
          description='List all installed j2me emulators. For this to work, you must define a wtk.home.EMULATOR_NAME property'>
    <listEmulators/>
  </target>

  <target name='list:devices' description='List all devices available for the active emulator.'>
    <listDevices/>
  </target>

  <target name='list:permissions'
          description='Print the list of permissions that will be included in the jad'>
    <concat>
      <propertyresource name='app.permissions'/>
    </concat>
  </target>

  <target name='package:all' description='create packages for multiple platforms/variants' depends='package:unsigned,package:signed'/>

  <target name='package:unsigned'>
    <!-- generic unsigned package -->
    <antcall target='package' inheritAll='true' inheritRefs='true'>
      <param name='sign.app' value='false'/>
      <param name='app.permissions' value=''/>
      <param name='jarfile' value='${project.build.directory}/${project.artifactId}_unsigned.jar'/>
      <param name='jadfile' value='${project.build.directory}/${project.artifactId}_unsigned.jad'/>
    </antcall>
  </target>

  <target name='package:signed'>
    <antcall target='package' inheritAll='true' inheritRefs='true'>
      <param name='sign.app' value='true'/>
      <param name='jarfile' value='${project.build.directory}/${project.artifactId}_signed.jar'/>
      <param name='jadfile' value='${project.build.directory}/${project.artifactId}_signed.jad'/>
    </antcall>
  </target>

  <target name='run:variant' description='a convenience target to save keystrokes for running a particular build variant'>
    <wtkrun jadfile='${project.build.directory}/${project.artifactId}_${variant}.jad' device='${device}' wait='${wtk.run.wait}'/>
  </target>

  <!-- ============ -->
  <!-- Dependencies -->
  <!-- ============ -->

  <!-- use the maven ant plugin to resolve dependencies -->
  <target name='resolve:maven' description='get build deps with maven ant tasks' depends='initialize' unless='has_all_deps'>
    <available classname='org.apache.maven.artifact.Artifact' property='maven_ant_tasks_available' classpathref='lib.classpath'/>
    <antcall target='download-maven-ant-tasks' inheritAll='true' inheritRefs='true'/>
  </target>

  <!--
    TODO: do not use single hard-coded maven-ant-tasks URL... randomly
    select location from a handful of known URLs?
  -->
  <target name='download-maven-ant-tasks' depends='initialize' unless='maven_ant_tasks_available'>
    <exec executable="mvn">
      <arg value="dependency:resolve"/>
    </exec>
    <linkOrCopy file="${maven.ant.tasks.jar}" tofile="${lib.dir}/maven-ant-tasks.jar"/>
  </target>

  <!--
    Once we have the maven ant tasks, we can resolve our deps and copy them to the lib.dir
  -->
  <target name='resolve' depends='resolve:deps'>
    <taskdef resource="antenna.properties" classpathref="lib.classpath"/>
  </target>

  <target name='resolve:deps' description='retrieve dependencies with maven and copy them to lib.dir'
      depends='initialize,resolve:maven' unless='has_all_deps'>

    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" classpathref='lib.classpath'/>

    <dependencies filesetId="dependency.fileset" useScope="runtime">
      <dependency groupId="${sstone.j2me.common.groupId}" artifactId="${sstone.j2me.common.artifactId}" version="${sstone.j2me.common.version}"/>
      <dependency groupId="${sstone.common.groupId}" artifactId="${sstone.common.artifactId}" version="${sstone.common.version}"/>
      <dependency groupId="${sstone.model.reader.groupId}" artifactId="${sstone.model.reader.artifactId}" version="${sstone.model.reader.version}"/>

      <dependency groupId="net.sf.antenna" artifactId="antenna" version="${antenna.version}"/>
      <dependency groupId="net.sf.proguard" artifactId="proguard" version="${proguard.version}"/>
      <dependency groupId="junit" artifactId="junit" version="${junit.version}"/>
    </dependencies>

    <linkOrCopyFiles fileset="dependency.fileset" todir="${lib.dir}"/>

    <!-- The wtkobfuscate requires the proguard jar to be in PROGUARD_HOME/proguard.jar -->
    <linkOrCopy file="${lib.dir}/proguard-${proguard.version}.jar" tofile="${lib.dir}/proguard.jar"/>

  </target>

  <target name='install' description='Install to the local maven repo' depends='package'>
    <install file="${jarfile}">
      <pom id="pom" file="pom.xml" />
    </install>
  </target>

</project>
